name: Automatic assign of new Issues

on:
  issues:
    types: [opened]

permissions:
  issues: write

jobs:
  auto-assign:
    name: Assign Milestone and Project
    runs-on: ubuntu-latest
    steps:
      - name: Assign Milestone
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          MILESTONE_NUMBER: "6"
        run: |
          # Fetch the internal database ID for the milestone based on its number
          MILESTONE_ID=$(gh api graphql -f query='
            query($repoOwner: String!, $repoName: String!, $milestoneNumber: Int!) {
              repository(owner: $repoOwner, name: $repoName) {
                milestone(number: $milestoneNumber) {
                  id
                }
              }
            }' -f repoOwner='${{ github.repository_owner }}' -f repoName='${{ github.event.repository.name }}' -F milestoneNumber=$MILESTONE_NUMBER --jq '.data.repository.milestone.id')

          if [ "$MILESTONE_ID" = "null" ] || [ -z "$MILESTONE_ID" ]; then
            echo "Milestone number $MILESTONE_NUMBER not found."
            exit 1
          fi

          # Update the issue using the Milestone's Node ID
          gh api graphql -f query='
            mutation($issueId: ID!, $milestoneId: ID!) {
              updateIssue(input: {id: $issueId, milestoneId: $milestoneId}) {
                clientMutationId
              }
            }' -f issueId="$ISSUE_NODE_ID" -f milestoneId="$MILESTONE_ID" --silent

          echo "Assigned issue #${{ github.event.issue.number }} to milestone number $MILESTONE_NUMBER"

      - name: Set Project
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
          PROJECT_NR: 2
          ORG: Nelos-VZW
        run: |
          # Get the project ID for the classic project
          PROJECT_ID=$(gh api orgs/$ORG/projects --preview=inertia --jq ".[] | select(.number==$PROJECT_NUMBER) | .id")
          if [ -z "$PROJECT_ID" ]; then
            echo "Project number $PROJECT_NUMBER not found."
            exit 1
          fi
      
          # Get the first column ID (or specify the desired column name/ID)
          COLUMN_ID=$(gh api orgs/$ORG/projects/$PROJECT_ID/columns --preview=inertia --jq ".[0].id")
          if [ -z "$COLUMN_ID" ]; then
            echo "No columns found in project."
            exit 1
          fi
      
          # Add the issue to the column
          gh api projects/columns/$COLUMN_ID/cards --preview=inertia -f content_type="Issue" -f content_url="$ISSUE_URL"
          echo "Added issue to classic project $PROJECT_NUMBER, column $COLUMN_ID."
